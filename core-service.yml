server:
  port: 8181

eureka:
  client:
    serviceUrl:
      defaultZone: ${EUREKA_SERVER:http://localhost:8761/eureka}
  instance:
    preferIpAddress: true

logging:
  level:
    com.backend.programming.learning.system: DEBUG

core-service:
  code-question-update-response-from-core-service-topic-name: code-question-update-response-from-core-service
  code-question-update-request-to-core-service-topic-name: code-question-update-request-to-core-service

  question-request-topic-name: core-question-request
  question-response-topic-name: core-question-response

  question-request-code-assessment-topic-name: core-question-request-code-assessment
  question-response-code-assessment-topic-name: core-question-response-code-assessment

  core-user-request-topic-name: core-user-request
  user-response-topic-name: user-response

  core-organization-request-topic-name: core-organization-request
  organization-response-topic-name: organization-response

  calendar-event-update-request-topic-name: calendar-event-update-request
  calendar-event-update-response-topic-name: calendar-event-update-response

  outbox-scheduler-fixed-rate: 2000
  outbox-scheduler-initial-delay: 2000

spring:
  application:
    name: core-service
  profiles:
    active: core
  kafka:
    bootstrap-servers: localhost:19092, localhost:29092, localhost:39092
  zipkin:
    sender:
      type: kafka
    base-url: http://localhost:9411
  sleuth:
    sampler:
      probability: 1.0
  mvc:
    pathmatch:
      matching-strategy: ant_path_matcher
  datasource:
    url: jdbc:postgresql://localhost:5432/core-service?currentSchema=public&binaryTransfer=true&reWriteBatchedInserts=true&stringtype=unspecified
    username: postgres
    password: localdb
    driver-class-name: org.postgresql.Driver

  sql:
    init:
      platform: postgres
      mode: always
      data-locations: classpath:init-data.sql
      schema-locations: classpath:init-schema.sql

kafka-config:
  bootstrap-servers: localhost:19092, localhost:29092, localhost:39092
  schema-registry-url-key: schema.registry.url
  schema-registry-url: http://localhost:8081
  num-of-partitions: 3
  replication-factor: 3

kafka-producer-config:
  key-serializer-class: org.apache.kafka.common.serialization.StringSerializer
  value-serializer-class: io.confluent.kafka.serializers.KafkaAvroSerializer
  compression-type: none
  acks: all
  batch-size: 16384
  batch-size-boost-factor: 100
  linger-ms: 5
  request-timeout-ms: 60000
  retry-count: 5

kafka-consumer-config:
  key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
  value-deserializer: io.confluent.kafka.serializers.KafkaAvroDeserializer
  core-service-user-consumer-group-id: core-service-user-topic-consumer

  core-service-question-consumer-group-id: core-service-question-topic-consumer
  core-service-code-question-consumer-group-id: core-service-code-question-topic-consumer

  core-service-calendar-event-consumer-group-id: core-service-calendar-event-topic-consumer

  core-service-user-request-group-id: core-service-user-request-topic

  code-question-update-consumer-group-id: code-question-update-topic-consumer

  core-service-organization-consumer-group-id: core-service-organization-topic-consumer

  auto-offset-reset: earliest
  specific-avro-reader-key: specific.avro.reader
  specific-avro-reader: true
  batch-listener: true
  auto-startup: true
  concurrency-level: 3
  session-timeout-ms: 10000
  heartbeat-interval-ms: 3000
  max-poll-interval-ms: 300000
  max-poll-records: 500
  max-partition-fetch-bytes-default: 1048576
  max-partition-fetch-bytes-boost-factor: 1
  poll-timeout-ms: 150

springdoc:
  api-docs:
    path: /core/v3/api-docs
  swagger-ui:
    path: /core/swagger-ui

security:
  paths-to-ignore: /core/v3/api-docs, /actuator/**

management:
  endpoints:
    web:
      exposure:
        include: "*"
  health:
    readiness-state:
      enabled: true
    liveness-state:
      enabled: true
  endpoint:
    health:
      probes:
        enabled: true
      show-details: always
    prometheus:
      cache.time-to-live: 1ms
  info:
    env:
      enabled: true
  metrics:
    tags:
      application: ${spring.application.name}
#  endpoints:
#    web:
#      base-path: /actuator
#      exposure.include: health, prometheus
#      path-mapping.prometheus: metrics
#  endpoint:
#    health:
#      show-details: always
#    prometheus:
#      cache.time-to-live: 1ms
#  metrics:
#    tags:
#      application: ${spring.application.name}

log:
  appName: core-service
